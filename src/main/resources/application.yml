server:
  port: 8888
  servlet:
    context-path: /sports-field-booking
    encoding:
      charset: UTF-8
      enabled: true
      force: true
      force-request: true
      force-response: true

jwt:
  accessSignerKey: ${ACCESS_SIGNER_KEY}
  refreshSignerKey: ${REFRESH_SIGNER_KEY}
  valid-duration: 1800 # in seconds = 30 minutes
  refreshable-duration: 2592000 # in seconds = 30 days

api:
  prefix: /api/v1

minio:
  endpoint: http://localhost:9000
  access-key: group23
  secret-key: gRoUp23IsThEbEsT#
  bucket-name: sports-field-booking-bucket
  temp-bucket-name: sports-field-booking-temp-bucket

# VNPAY
payment:
  vnPay:
    url: "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html"
    tmnCode: "58X4B4HP"
    secretKey: "VRLDWNVWDNPCOEPBZUTWSEDQAGXJCNGZ"
    returnUrl: "http://localhost:8888/sports-field-booking/api/v1/payment/vnpay/callback"
    version: "2.1.0"
    command: "pay"
    orderType: "other"
  momo:
    paymentUrl: "https://test-payment.momo.vn/v2/gateway/api/confirm"
    redirectUrl: "http://localhost:3333/sports-field-booking/payment/momo/callback"
    partnerCode: "MOMOBKUN20180529"
    accessKey: "klm05TvNBzhg7h7j"
    secretKey: "at67qH6mk8w5Y1nAyMoYKMWACiEi2bsa"

# Spring Boot Actuator configuration (Health, Info, Metrics, etc.)
management:
  endpoints:
    web:
      base-path: ${api.prefix}/actuator
      exposure:
        include: "*"

  endpoint:
    health:
      show-details: always

# Springdoc configuration (Swagger UI)
springdoc:
  api-docs:
    enabled: true
    path: /api-docs

  swagger-ui:
    enabled: true
    path: /swagger-ui.html

  show-actuator: true

# OpenAPI configuration
openapi:
  service:
    api-docs: rest-api-service-dev
    title: Sports Field Booking server REST API
    description: This is the API documentation for Sports Field Booking software.
    version: 1.0.0
    server-url: http://localhost:${server.port}${server.servlet.context-path}
    server-description: Sports Field Booking Backend API service For Development

# Logging configuration
logging:
  level:
    org:
      springframework:
        security: DEBUG

security:
  oauth2:
    client:
      registration:
        google:
          client-id: ${GOOGLE_CLIENT_ID}
          client-secret: ${GOOGLE_CLIENT_SECRET}
          redirect-uri: "${GOOGLE_REDIRECT_URI:http://localhost:3333/sports-field-booking/auth/google/callback}"
          auth-uri: https://accounts.google.com/o/oauth2/v2/auth
          token-uri: https://oauth2.googleapis.com/token
          user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          scope: openid profile email
          resource-server:
            opaque-token:
              introspection-uri: "https://googleapis.com"

        facebook:
          client-id: ${FACEBOOK_CLIENT_ID}
          client-secret: ${FACEBOOK_CLIENT_SECRET}
          redirect-uri: "${FACEBOOK_REDIRECT_URI:http://localhost:3333/sports-field-booking/auth/facebook/callback}"
          auth-uri: https://www.facebook.com/v21.0/dialog/oauth
          token-uri: https://graph.facebook.com/oauth/access_token
          user-info-uri: https://graph.facebook.com/me?fields=id,name,email,picture.type(large)
          scope: email,public_profile

        github:
          client-id: ${GITHUB_CLIENT_ID}
          client-secret: ${GITHUB_CLIENT_SECRET}
          redirect-uri: "${GITHUB_REDIRECT_URI:http://localhost:3333/sports-field-booking/auth/github/callback}"
          auth-uri: https://
          token-uri: https://
          user-info-uri: https://api.github.com/user
          scope: user:email

# Spring configuration
spring:
  config:
    import: file:env.properties

  application:
    name: sports-field-booking

  profiles:
    active: dev

  servlet:
    multipart:
      enabled: true
      max-file-size: 50MB
      max-request-size: 50MB

  messages:
    basename: i18n/messages
    encoding: UTF-8
    default-locale: en
    cache-duration: 3600

  mail:
    from: ${FROM_MAIL}
    host: smtp.gmail.com
    port: 587
    username: ${FROM_MAIL}
    password: ${SMTP_PASSWORD} # wzjg pkgh yvmv noyz
    default-encoding: UTF-8
    properties:
      mail:
        mime:
          charset: UTF
        smtp:
          writetimeout: 10000
          connectiontimeout: 10000
          timeout: 10000
          auth: true
          starttls:
            enable: true
            required: true

  # Database configuration
  datasource:
    username: group23
    password: gRoUp23IsThEbEsT#
    url: jdbc:mysql://localhost:3306/sports_field_booking_db?createDatabaseIfNotExist=true
    hikari:
      driver-class-name: com.mysql.cj.jdbc.Driver
      maximum-pool-size: 10

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true

  # Redis configuration
#  cache:
#    type: redis

  data:
    redis:
      port: 6379
      host: localhost
      database: 0

  # Configure Kafka
  kafka:
    bootstrap-servers: localhost:9092

    mail-consumer:
      group-id: send-mail-group

    file-consumer:
      group-id: handle-file-group
